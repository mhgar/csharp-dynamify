
// ! AUTOGENERATED FILE !
using System;

namespace Wander.Pigeon.Dynamic {
public static class ActionConverters {
public static Func<object[], object> MakeActionDynamic(Action action) {
    return args => {
        if (args.Length != 0) throw new ArgumentException($"Expected 0 arguments, received {args.Length}.");
        
        action();
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A>(Action<A> action) {
    return args => {
        if (args.Length != 1) throw new ArgumentException($"Expected 1 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        action((A) args[0]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B>(Action<A, B> action) {
    return args => {
        if (args.Length != 2) throw new ArgumentException($"Expected 2 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        action((A) args[0], (B) args[1]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C>(Action<A, B, C> action) {
    return args => {
        if (args.Length != 3) throw new ArgumentException($"Expected 3 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D>(Action<A, B, C, D> action) {
    return args => {
        if (args.Length != 4) throw new ArgumentException($"Expected 4 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E>(Action<A, B, C, D, E> action) {
    return args => {
        if (args.Length != 5) throw new ArgumentException($"Expected 5 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F>(Action<A, B, C, D, E, F> action) {
    return args => {
        if (args.Length != 6) throw new ArgumentException($"Expected 6 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G>(Action<A, B, C, D, E, F, G> action) {
    return args => {
        if (args.Length != 7) throw new ArgumentException($"Expected 7 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H>(Action<A, B, C, D, E, F, G, H> action) {
    return args => {
        if (args.Length != 8) throw new ArgumentException($"Expected 8 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I>(Action<A, B, C, D, E, F, G, H, I> action) {
    return args => {
        if (args.Length != 9) throw new ArgumentException($"Expected 9 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J>(Action<A, B, C, D, E, F, G, H, I, J> action) {
    return args => {
        if (args.Length != 10) throw new ArgumentException($"Expected 10 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J, K>(Action<A, B, C, D, E, F, G, H, I, J, K> action) {
    return args => {
        if (args.Length != 11) throw new ArgumentException($"Expected 11 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        if (!(args[10] is K)) throw new ArgumentException($"Expected argument 11's type to be {typeof(K).FullName}, received {args[10].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9], (K) args[10]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J, K, L>(Action<A, B, C, D, E, F, G, H, I, J, K, L> action) {
    return args => {
        if (args.Length != 12) throw new ArgumentException($"Expected 12 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        if (!(args[10] is K)) throw new ArgumentException($"Expected argument 11's type to be {typeof(K).FullName}, received {args[10].GetType().FullName}.");
        if (!(args[11] is L)) throw new ArgumentException($"Expected argument 12's type to be {typeof(L).FullName}, received {args[11].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9], (K) args[10], (L) args[11]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J, K, L, M>(Action<A, B, C, D, E, F, G, H, I, J, K, L, M> action) {
    return args => {
        if (args.Length != 13) throw new ArgumentException($"Expected 13 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        if (!(args[10] is K)) throw new ArgumentException($"Expected argument 11's type to be {typeof(K).FullName}, received {args[10].GetType().FullName}.");
        if (!(args[11] is L)) throw new ArgumentException($"Expected argument 12's type to be {typeof(L).FullName}, received {args[11].GetType().FullName}.");
        if (!(args[12] is M)) throw new ArgumentException($"Expected argument 13's type to be {typeof(M).FullName}, received {args[12].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9], (K) args[10], (L) args[11], (M) args[12]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(Action<A, B, C, D, E, F, G, H, I, J, K, L, M, N> action) {
    return args => {
        if (args.Length != 14) throw new ArgumentException($"Expected 14 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        if (!(args[10] is K)) throw new ArgumentException($"Expected argument 11's type to be {typeof(K).FullName}, received {args[10].GetType().FullName}.");
        if (!(args[11] is L)) throw new ArgumentException($"Expected argument 12's type to be {typeof(L).FullName}, received {args[11].GetType().FullName}.");
        if (!(args[12] is M)) throw new ArgumentException($"Expected argument 13's type to be {typeof(M).FullName}, received {args[12].GetType().FullName}.");
        if (!(args[13] is N)) throw new ArgumentException($"Expected argument 14's type to be {typeof(N).FullName}, received {args[13].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9], (K) args[10], (L) args[11], (M) args[12], (N) args[13]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(Action<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O> action) {
    return args => {
        if (args.Length != 15) throw new ArgumentException($"Expected 15 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        if (!(args[10] is K)) throw new ArgumentException($"Expected argument 11's type to be {typeof(K).FullName}, received {args[10].GetType().FullName}.");
        if (!(args[11] is L)) throw new ArgumentException($"Expected argument 12's type to be {typeof(L).FullName}, received {args[11].GetType().FullName}.");
        if (!(args[12] is M)) throw new ArgumentException($"Expected argument 13's type to be {typeof(M).FullName}, received {args[12].GetType().FullName}.");
        if (!(args[13] is N)) throw new ArgumentException($"Expected argument 14's type to be {typeof(N).FullName}, received {args[13].GetType().FullName}.");
        if (!(args[14] is O)) throw new ArgumentException($"Expected argument 15's type to be {typeof(O).FullName}, received {args[14].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9], (K) args[10], (L) args[11], (M) args[12], (N) args[13], (O) args[14]);
        return null;
    };
}

public static Func<object[], object> MakeActionDynamic<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(Action<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P> action) {
    return args => {
        if (args.Length != 16) throw new ArgumentException($"Expected 16 arguments, received {args.Length}.");
        if (!(args[0] is A)) throw new ArgumentException($"Expected argument 1's type to be {typeof(A).FullName}, received {args[0].GetType().FullName}.");
        if (!(args[1] is B)) throw new ArgumentException($"Expected argument 2's type to be {typeof(B).FullName}, received {args[1].GetType().FullName}.");
        if (!(args[2] is C)) throw new ArgumentException($"Expected argument 3's type to be {typeof(C).FullName}, received {args[2].GetType().FullName}.");
        if (!(args[3] is D)) throw new ArgumentException($"Expected argument 4's type to be {typeof(D).FullName}, received {args[3].GetType().FullName}.");
        if (!(args[4] is E)) throw new ArgumentException($"Expected argument 5's type to be {typeof(E).FullName}, received {args[4].GetType().FullName}.");
        if (!(args[5] is F)) throw new ArgumentException($"Expected argument 6's type to be {typeof(F).FullName}, received {args[5].GetType().FullName}.");
        if (!(args[6] is G)) throw new ArgumentException($"Expected argument 7's type to be {typeof(G).FullName}, received {args[6].GetType().FullName}.");
        if (!(args[7] is H)) throw new ArgumentException($"Expected argument 8's type to be {typeof(H).FullName}, received {args[7].GetType().FullName}.");
        if (!(args[8] is I)) throw new ArgumentException($"Expected argument 9's type to be {typeof(I).FullName}, received {args[8].GetType().FullName}.");
        if (!(args[9] is J)) throw new ArgumentException($"Expected argument 10's type to be {typeof(J).FullName}, received {args[9].GetType().FullName}.");
        if (!(args[10] is K)) throw new ArgumentException($"Expected argument 11's type to be {typeof(K).FullName}, received {args[10].GetType().FullName}.");
        if (!(args[11] is L)) throw new ArgumentException($"Expected argument 12's type to be {typeof(L).FullName}, received {args[11].GetType().FullName}.");
        if (!(args[12] is M)) throw new ArgumentException($"Expected argument 13's type to be {typeof(M).FullName}, received {args[12].GetType().FullName}.");
        if (!(args[13] is N)) throw new ArgumentException($"Expected argument 14's type to be {typeof(N).FullName}, received {args[13].GetType().FullName}.");
        if (!(args[14] is O)) throw new ArgumentException($"Expected argument 15's type to be {typeof(O).FullName}, received {args[14].GetType().FullName}.");
        if (!(args[15] is P)) throw new ArgumentException($"Expected argument 16's type to be {typeof(P).FullName}, received {args[15].GetType().FullName}.");
        action((A) args[0], (B) args[1], (C) args[2], (D) args[3], (E) args[4], (F) args[5], (G) args[6], (H) args[7], (I) args[8], (J) args[9], (K) args[10], (L) args[11], (M) args[12], (N) args[13], (O) args[14], (P) args[15]);
        return null;
    };
}}}