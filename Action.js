const fs = require('fs');

const range = (num) => [...Array(num).keys()];
const params = (numParams) => range(numParams).map(i => String.fromCharCode(65 + i));
const printParams = (numParams) => (numParams == 0 ? '' : `<${params(numParams).join(', ')}>`);

const generateArgsTypeChecking = (numParams) => {
    return params(numParams).map((p, i) => {
        return `if (!(args[${i}] is ${p})) throw new ArgumentException($"Expected argument ${i+1}'s type to be {typeof(${p}).FullName}, received {args[${i}].GetType().FullName}.");`
    }).join('\n        ');
};

const generateCallArgs = (numParams) => {
    return params(numParams).map((p, i) => {
        return `(${p}) args[${i}]`;
    }).join(', ');
};

const functionTemplate = (numParams) => {
return `public static Func<object[], object> MakeActionDynamic${printParams(numParams)}(Action${printParams(numParams)} action) {
    return args => {
        if (args.Length != ${numParams}) throw new ArgumentException($"Expected ${numParams} arguments, received {args.Length}.");
        ${generateArgsTypeChecking(numParams)}
        action(${generateCallArgs(numParams)});
        return null;
    };
}`;
};

const header = `
// ! AUTOGENERATED FILE !
using System;

namespace Wander.Pigeon.Dynamic {
public static class ActionConverters {
`
const footer = `}}`


const output = header + range(17).map(i => functionTemplate(i)).join('\n\n') + footer;
fs.writeFileSync("ActionConverters.cs", output);